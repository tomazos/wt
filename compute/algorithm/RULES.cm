library{
  name = "algorithm",
  headers = {
    "copy_if.h",
    "rotate.h",
    "is_permutation.h",
    "iota.h",
    "nth_element.h",
    "partition_point.h",
    "replace.h",
    "reverse.h",
    "is_sorted.h",
    "inner_product.h",
    "set_union.h",
    "sort.h",
    "gather.h",
    "search.h",
    "partition.h",
    "inclusive_scan.h",
    "remove_if.h",
    "prev_permutation.h",
    "search_n.h",
    "copy.h",
    "stable_partition.h",
    "equal.h",
    "lexicographical_compare.h",
    "find_if_not.h",
    "none_of.h",
    "remove.h",
    "for_each.h",
    "accumulate.h",
    "max_element.h",
    "swap_ranges.h",
    "includes.h",
    "find_end.h",
    "is_partitioned.h",
    "reverse_copy.h",
    "generate_n.h",
    "for_each_n.h",
    "unique_copy.h",
    "transform.h",
    "replace_copy.h",
    "inplace_merge.h",
    "partition_copy.h",
    "adjacent_difference.h",
    "set_symmetric_difference.h",
    "find_if.h",
    "min_element.h",
    "equal_range.h",
    "copy_n.h",
    "generate.h",
    "count_if.h",
    "next_permutation.h",
    "upper_bound.h",
    "reduce_by_key.h",
    "scatter.h",
    "reduce.h",
    "find.h",
    "lower_bound.h",
    "set_difference.h",
    "fill_n.h",
    "minmax_element.h",
    "exclusive_scan.h",
    "stable_sort.h",
    "mismatch.h",
    "count.h",
    "partial_sum.h",
    "transform_reduce.h",
    "random_shuffle.h",
    "unique.h",
    "sort_by_key.h",
    "any_of.h",
    "all_of.h",
    "merge.h",
    "binary_search.h",
    "rotate_copy.h",
    "fill.h",
    "set_intersection.h",
    "transform_if.h",
    "adjacent_find.h",
  },
};
