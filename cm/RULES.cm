test{
  name = "api_test",
  sources = {
    "api_test.cc",
  },
  dependencies = {
    "cm",
    "/main/gtest",
  },
};

test{
  name = "allocator_test",
  sources = {
    "allocator_test.cc",
  },
  dependencies = {
    "cm",
    "/testing",
  },
};

test{
  name = "context_test",
  sources = {
    "context_test.cc",
  },
  dependencies = {
    "cm",
    "/main/gtest",
  },
};

program{
  name = "interpreter",
  sources = {
    "interpreter.cc",
  },
  dependencies = {
    "value",
    "/core/file_functions",
    "/main/args",
  },
};

test{
  name = "lang_test",
  sources = {
    "lang_test.cc",
  },
  dependencies = {
    "library",
    "cm",
    "/main/gtest",
  },
};

test{
  name = "lex_test",
  sources = {
    "lex_test.cc",
  },
  dependencies = {
    "cm",
    "/main/gtest",
  },
};

library{
  name = "library",
  headers = {
    "library.h",
  },
  sources = {
    "library.cc",
  },
  dependencies = {
    "cm",
  },
};

library{
  name = "proto",
  headers = {
    "proto.h",
  },
  sources = {
    "proto.cc",
  },
  dependencies = {
    "cm",
    "value",
  },
};

test{
  name = "proto_test",
  sources = {
    "proto_test.cc",
  },
  dependencies = {
    "proto",
    "proto_test_proto",
    "/main/gtest",
  },
};

proto{
  name = "proto_test_proto",
  sources = {
    "proto_test.proto",
  },
};

test{
  name = "state_test",
  sources = {
    "state_test.cc",
  },
  dependencies = {
    "cm",
    "/main/gtest",
  },
};

library{
  name = "value",
  headers = {
    "value.h",
  },
  sources = {
    "value.cc",
  },
  dependencies = {
    "cm",
  },
};

test{
  name = "value_test",
  sources = {
    "value_test.cc",
  },
  dependencies = {
    "value",
    "/main/gtest",
  },
};

library{
  name = "cm",
  headers = {
    "allocator.h",
    "api.h",
    "context.h",
    "debug_allocator.h",
    "reader.h",
    "state.h",
    "type.h",
    "writer.h",
  },
  sources = {
    "api.cc",
    "debug_allocator.cc",
    "state.cc",
    "type.cc",
  },
  dependencies = {
    "/core/must",
    "/cm/private/core",
  },
};

